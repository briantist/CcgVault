---
name: Build & Test
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SOLUTION: src\CcgVault.sln
  RELEASE: src\CcgVault\bin\Release
  CCG_BUILD_VER: 0.0.99
  BUILDVER1: 0.0.99
  BUILDVER2: 0.0.100

jobs:
  build:
    name: build
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: Restore Packages
        run: nuget restore ${{ env.SOLUTION }}

      - name: Build Solution
        run: msbuild.exe ${{ env.SOLUTION }} /m /p:platform="Any CPU" /p:configuration="Release"

      - name: Build MSI 1
        run: msi\build.cmd %BUILDVER1%

      - name: Build MSI 2
        run: msi\build.cmd %BUILDVER2% *.wix*

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          retention-days: 1
          name: bin
          path: ${{ env.RELEASE }}

      - name: Upload MSI artifacts
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          retention-days: 1
          name: msi
          path: msi/out/*.msi

  test:
    name: test - ${{ matrix.mode }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - windows-2022
        mode:
          - bin
          - msi-fresh
          - msi-upgrade-self
          - msi-upgrade
          - msi-reinstall
    env:
      INTEGRATION: .\test\integration
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ env.INTEGRATION }}
    steps:
      - uses: actions/checkout@v3

      # https://github.com/beatcracker/Powershell-Misc
      # We want to use:
      # - https://github.com/beatcracker/Powershell-Misc/blob/d0704cea3d1eb948f9720dc8826a630e86150c08/Write-Host.ps1
      - name: PowerShell-Misc
        uses: actions/checkout@v3
        with:
          repository: beatcracker/Powershell-Misc
          ref: d0704cea3d1eb948f9720dc8826a630e86150c08
          path: .powershell

      - name: Retrieve artifacts
        id: artifact
        uses: actions/download-artifact@v3
        with:
          path: .artifact

      - name: Install PowerShell modules
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: MSI:3.3.4
          shell: pwsh

      - name: Set MSI names
        if: startsWith(matrix.mode, 'msi')
        run: |
          $fName = 'ccgvault_v{0}_x64.msi'

          for ($i = 1 ; $i -le 2 ; ++$i) {
              $v = [System.Environment]::GetEnvironmentVariable("BUILDVER${i}")
              $name = $fName -f $v
              $path = '${{ steps.artifact.outputs.download-path }}' |
                  Join-Path -ChildPath 'msi' |
                  Join-Path -ChildPath $name

              echo "MSI${i}=$name" >> $env:GITHUB_ENV
              echo "MSIPATH${i}=$path" >> $env:GITHUB_ENV
          }

      - name: Test absent (pre-run)
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Absent -Output Detailed

      - name: Install from MSI
        if: startsWith(matrix.mode, 'msi')
        run: |
          & .\Install-MsiLogged.ps1 -LiteralPath $env:MSIPATH1 -LogFile '${{ runner.temp }}\output.log'

      - name: Test present (install)
        if: startsWith(matrix.mode, 'msi')
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Present -Output Detailed


      - name: Upgrade self (install same version)
        if: endsWith(matrix.mode, 'upgrade-self')
        run: |
          & .\Install-MsiLogged.ps1 -LiteralPath $env:MSIPATH1 -LogFile '${{ runner.temp }}\output.log'

      - name: Test present (self-upgrade)
        if: endsWith(matrix.mode, 'upgrade-self')
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Present -Output Detailed

      - name: Upgrade
        if: endsWith(matrix.mode, 'upgrade')
        run: |
          & .\Install-MsiLogged.ps1 -LiteralPath $env:MSIPATH2 -LogFile '${{ runner.temp }}\output.log'

      - name: Test present (upgraded)
        if: endsWith(matrix.mode, 'upgrade')
        env:
          CCG_BUILD_VER: ${{ env.BUILDVER2 }}
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Present -Output Detailed

      - name: Uninstall
        if: endsWith(matrix.mode, 'reinstall')
        run: |
          & .\Install-MsiLogged.ps1 -Mode X -LiteralPath $env:MSIPATH1 -LogFile '${{ runner.temp }}\output.log'

      - name: Test absent (uninstall)
        if: endsWith(matrix.mode, 'reinstall')
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Absent -Output Detailed

      - name: Reinstall
        if: endsWith(matrix.mode, 'reinstall')
        run: |
          & .\Install-MsiLogged.ps1 -Mode I -LiteralPath $env:MSIPATH1 -LogFile '${{ runner.temp }}\output.log'

      - name: Test present
        if: endsWith(matrix.mode, 'reinstall')
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Present -Output Detailed

      - name: Set bin location
        run: |
          $path = if ('${{ matrix.mode }}'.StartsWith('msi')) {
              $env:ProgramFiles | Join-Path -ChildPath 'CcgVault'
          }
          else {
              '${{ steps.artifact.outputs.download-path }}' |
                  Join-Path -ChildPath 'bin'
          }
          echo "CcgVaultBin=${path}" >> $env:GITHUB_ENV

      - name: Uninstall
        if: startsWith(matrix.mode, 'msi')
        run: |
          & .\Install-MsiLogged.ps1 -Mode X -LiteralPath $env:MSIPATH1 -LogFile '${{ runner.temp }}\output.log'

      - name: Test absent (uninstall)
        if: startsWith(matrix.mode, 'msi')
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -Tag Absent -Output Detailed

      - name: Run simple help
        shell: cmd
        working-directory: ${{ env.CcgVaultBin }}
        run: CcgVault.exe --help

      - name: Set registry entry
        shell: cmd
        working-directory: ${{ env.CcgVaultBin }}
        run: CcgVault.exe registry --permission --comclass

      - name: Test registry present
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -ExcludeTagFilter Absent -Tag Registry -Output Detailed

      - name: Create COM+ app
        shell: cmd
        working-directory: ${{ env.CcgVaultBin }}
        run: CcgVault.exe ping

      - name: Test COM+ present
        env:
          COMPLUS_IDENTITY: Interactive User
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -ExcludeTagFilter Absent -Tag ComPlus -Output Detailed

      - name: Create NT Service for COM+ app
        shell: cmd
        working-directory: ${{ env.CcgVaultBin }}
        run: CcgVault.exe service --install

      - name: Test NT Service present and COM+ Identity
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -ExcludeTagFilter Absent -Tag NtService,ComPlus -Output Detailed

      - name: Remove NT Service
        shell: cmd
        working-directory: ${{ env.CcgVaultBin }}
        run: CcgVault.exe service --uninstall

      - name: Test NT Service absent
        run: |
          . .\Initialize-Pester.ps1
          Invoke-Pester -ExcludeTagFilter Present -Tag NtService -Output Detailed
